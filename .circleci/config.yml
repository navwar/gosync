# ==================================================================================
#
# Work of the U.S. Department of the Navy, Naval Information Warfare Center Pacific.
# Released as open source under the MIT License.  See LICENSE file.
#
# ==================================================================================

version: "2.1"

executors:

  # `ubuntu_amd64` uses an ubuntu amd64 machine image.
  ubuntu_amd64:
    machine:
      image: ubuntu-2204:2023.10.1

  # `ubuntu_arm` uses an ubuntu ARM machine image.
  ubuntu_arm:
    machine:
      image: ubuntu-2204:2023.10.1
    resource_class: arm.medium

  # `base` uses the `cimg/base` docker image.
  base:
    docker:
      - image: cimg/base:2023.02

  # `go` uses the `cimg/go:1.21` docker image.
  go:
    docker:
      - image: cimg/go:1.21

  # `go_large` uses the `cimg/go:1.21` docker image with a large resource class.
  go_large:
    docker:
      - image: cimg/go:1.21
    resource_class: large

  # `macos` uses the macOS machine image.
  macos:
    macos:
      xcode: 14.2.0
      resource_class: macos.x86.medium.gen2

  # `windows` uses the Windows machine image.
  windows:
    machine:
      image: "windows-server-2019-vs2019:stable"
      resource_class: "windows.medium"
      shell: "powershell.exe -ExecutionPolicy Bypass"


jobs:

  # `test_go` tests the source code.
  test_go:
    executor: go
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run: make fmt
      - run: make imports
      - run: make test_go
      - run: make check_headers
      - run: git diff --exit-code

  # `test_cli` tests the executable.
  test_cli:
    executor: go
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run: make tidy
      - run: make bin/gosync
      - run: make test_cli
      - run: make sync_testdata
      - run: make bin/minio_linux_amd64
      - run: make minio_serve_detached
      - run: 'export "PATH=$(PWD)/bin:$PATH" && make minio_sync_testdata'
      - run: make minio_stop_detached

  # `build` builds the executables
  build:
    executor: go_large
    steps:
      - checkout

      # Update apt cache
      - run: sudo apt-get update

      # Tidy dependencies
      - run: make tidy

      # Make gox
      - run: make bin/gox

      # Print supported OS/Arch combinations
      - run: bin/gox -osarch-list

      # Build Executeables
      - run: make build_release

      # Remove gox
      - run: rm -f bin/gox

      - store_artifacts:
          path: bin
          destination: /

      - persist_to_workspace:
          root: bin
          paths:
            - gosync_darwin_amd64
            - gosync_darwin_arm64
            - gosync_freebsd_386
            - gosync_freebsd_amd64
            - gosync_freebsd_arm
            - gosync_linux_386
            - gosync_linux_amd64
            - gosync_linux_arm
            - gosync_linux_arm64
            - gosync_netbsd_386
            - gosync_netbsd_amd64
            - gosync_netbsd_arm
            - gosync_openbsd_386
            - gosync_openbsd_amd64
            - gosync_solaris_amd64
            - gosync_windows_386.exe
            - gosync_windows_amd64.exe

  # `build_docker` builds the docker container.
  build_docker:
    executor: ubuntu_amd64
    steps:
      - checkout
      - run: make docker_build
      - run: make docker_version
      - run: make docker_help
      - run: make docker_sync_testdata

  # `verify_linux` verifys the linux build
  verify_linux:
    executor: base
    steps:
      - attach_workspace:
          at: bin
      - run: bin/gosync_linux_386 --help
      - run: bin/gosync_linux_amd64 --help

  # `verify_linux_arm` verifys the linux/arm build
  verify_linux_arm:
    executor: ubuntu_arm
    steps:
      - attach_workspace:
          at: bin
      - run: bin/gosync_linux_arm --help
      - run: bin/gosync_linux_arm64 --help

  # `verify_macos` verifys the macOS build
  verify_macos:
    executor: macos
    steps:
      - attach_workspace:
          at: bin
      - run: bin/gosync_darwin_amd64 --help

  # `verify_windows` verifys the windows build
  verify_windows:
    executor: windows
    steps:
      - attach_workspace:
          at: bin
      - run: bin/gosync_windows_386.exe --help
      - run: bin/gosync_windows_amd64.exe --help

workflows:
  version: 2
  main:
    jobs:
      - test_go
      - test_cli
      - build
      - build_docker
      - verify_linux:
          requires:
            - build
      - verify_linux_arm:
          requires:
            - build
      - verify_macos:
          requires:
            - build
      - verify_windows:
          requires:
            - build
